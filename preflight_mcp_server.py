# --------------------------------------------------------------------------
# preflight_mcp_server.py
# --------------------------------------------------------------------------
"""
Vinyl Preflight Processor MCP Server v2.5 - Fin√°ln√≠ Produkƒçn√≠ Verze

- MCP server pro kompletn√≠ preflight validaci vinylov√Ωch projekt≈Ø
- Implementuje plnou podporu pro "Consolidated Side" m√≥d (jeden WAV na stranu)
- Automaticky detekuje m√≥d projektu a vol√≠ spr√°vnou validaƒçn√≠ strategii
- Poskytuje p≈ôesn√© a relevantn√≠ reporty pro v≈°echny typy projekt≈Ø
"""
import asyncio
import os
import sys
import json
import time
import logging
import tempfile
import traceback
import csv
from pathlib import Path
from typing import Dict, Any, Optional, List, Tuple, Callable
from contextlib import asynccontextmanager

import numpy as np
import soundfile as sf

# Import matplotlib pouze pokud je k dispozici
try:
    import matplotlib
    matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    MATPLOTLIB_AVAILABLE = True
except ImportError:
    MATPLOTLIB_AVAILABLE = False
    logging.warning("Matplotlib nen√≠ nainstalov√°n. Vizualizace nebudou dostupn√©.")

from mcp.server.fastmcp import FastMCP, Context
from dotenv import load_dotenv

# Glob√°ln√≠ statistiky
class Stats:
    def __init__(self):
        self.analysis_count = 0
        self.total_projects_processed = 0
        self.total_processing_time = 0.0
        self.last_report_path = None

# Glob√°ln√≠ instance statistik
global_stats = Stats()

# Importujeme p≈Øvodn√≠ moduly a t≈ô√≠dy
try:
    from src.vinyl_preflight_app_2 import (
        PreflightProcessor as OriginalPreflightProcessor,
        _get_wav_duration_worker,
        seconds_to_mmss,
        CSV_HEADERS
    )
except ImportError:
    logging.error("Nelze importovat vinyl_preflight_app. Ujistƒõte se, ≈æe soubor existuje ve stejn√©m adres√°≈ôi.")
    sys.exit(1)

# Import pro optimalizovanou verzi
import concurrent.futures

# ------------------------------------------------------------
# Optimalizovan√° verze PreflightProcessor pro MCP server
# ------------------------------------------------------------
class PreflightProcessor(OriginalPreflightProcessor):
    """
    Optimalizovan√° verze PreflightProcessor pro MCP server.
    Nahrazuje multiprocessing za ThreadPoolExecutor pro lep≈°√≠ kompatibilitu s asyncio.
    """

    def _get_all_wav_durations(self, projects: dict):
        """
        Optimalizovan√° verze pro MCP server - pou≈æ√≠v√° ThreadPoolExecutor m√≠sto multiprocessing.
        """
        all_wav_paths = [wav for proj in projects.values() for wav in proj['wavs']]
        durations = {}

        # Pou≈æijeme ThreadPoolExecutor m√≠sto multiprocessing.Pool()
        with concurrent.futures.ThreadPoolExecutor(max_workers=min(8, len(all_wav_paths))) as executor:
            # Ode≈°leme v≈°echny √∫lohy
            future_to_path = {executor.submit(_get_wav_duration_worker, wav_path): wav_path for wav_path in all_wav_paths}

            # Sb√≠r√°me v√Ωsledky
            for future in concurrent.futures.as_completed(future_to_path):
                try:
                    path_str, duration = future.result()
                    durations[path_str] = duration
                except Exception as e:
                    wav_path = future_to_path[future]
                    logger.error(f"Chyba p≈ôi zpracov√°n√≠ WAV souboru {wav_path}: {e}")
                    durations[wav_path.as_posix()] = None

        return durations

# ------------------------------------------------------------
# Konfigurace
# ------------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("vinyl-preflight-mcp")

# Diagnostika - vypi≈° informace o prost≈ôed√≠
logger.info(f"Aktu√°ln√≠ pracovn√≠ adres√°≈ô: {os.getcwd()}")
logger.info(f"Um√≠stƒõn√≠ skriptu: {Path(__file__).resolve()}")
logger.info(f"Obsah aktu√°ln√≠ho adres√°≈ôe: {os.listdir('.')}")

# Naƒçten√≠ konfigurace
# Zkus√≠me nƒõkolik mo≈æn√Ωch um√≠stƒõn√≠ .env souboru
possible_paths = [
    Path('.env'),  # Aktu√°ln√≠ adres√°≈ô
    Path(__file__).parent / '.env',  # Stejn√Ω adres√°≈ô jako skript
    Path(__file__).resolve().parent / '.env',  # Absolutn√≠ cesta ke stejn√©mu adres√°≈ôi
    Path.home() / '.env',  # Domovsk√Ω adres√°≈ô u≈æivatele
]

env_loaded = False
for path in possible_paths:
    logger.info(f"Kontroluji cestu pro .env: {path}")
    if path.exists():
        logger.info(f"Nalezen .env soubor na cestƒõ: {path}")
        load_dotenv(dotenv_path=path)
        env_loaded = True
        break

if not env_loaded:
    logger.error("Soubor .env nebyl nalezen na ≈æ√°dn√© z oƒçek√°van√Ωch cest!")
    raise ValueError("Soubor .env nebyl nalezen. Ujistƒõte se, ≈æe existuje v jednom z oƒçek√°van√Ωch um√≠stƒõn√≠.")

API_KEY = os.getenv("OPENROUTER_API_KEY")
logger.info(f"Naƒçten√Ω API kl√≠ƒç: {'***' if API_KEY else 'None'}")

if not API_KEY:
    logger.error("Chyb√≠ OPENROUTER_API_KEY v .env souboru!")
    raise ValueError("API kl√≠ƒç (OPENROUTER_API_KEY) nebyl nalezen v .env souboru.")

# Vytvo≈ôen√≠ MCP serveru
mcp = FastMCP(
    "vinyl-preflight-processor",
    description="Komplexn√≠ preflight validace pro vinylov√© projekty, vƒçetnƒõ extrakce z PDF a porovn√°n√≠ s WAV.",
    version="2.5.0"
)

# ------------------------------------------------------------
# T≈ô√≠da pro vizualizaci v√Ωsledk≈Ø (pouze pokud je matplotlib dostupn√Ω)
# ------------------------------------------------------------
class ResultsVisualizer:
    """Generuje vizualizace v√Ωsledk≈Ø pro lep≈°√≠ p≈ôehlednost"""
    
    @staticmethod
    def create_validation_chart(results: List[Dict], output_path: Path) -> bool:
        """Vytvo≈ô√≠ sloupcov√Ω graf s porovn√°n√≠m d√©lek PDF vs WAV
        
        Vrac√≠ True pokud se poda≈ôilo vytvo≈ôit graf, jinak False
        """
        if not MATPLOTLIB_AVAILABLE:
            logger.warning("Matplotlib nen√≠ dostupn√Ω, vizualizace nelze vytvo≈ôit")
            return False
        
        # P≈ô√≠prava dat
        items = []
        pdf_durations = []
        wav_durations = []
        differences = []
        
        for row in results:
            if row.get('pdf_duration_sec') is not None and row.get('wav_duration_sec') is not None:
                items.append(row.get('validation_item', 'Nezn√°m√° polo≈æka')[:20])  # Omezen√≠ d√©lky pro zobrazen√≠
                pdf_durations.append(row.get('pdf_duration_sec', 0))
                wav_durations.append(row.get('wav_duration_sec', 0))
                differences.append(row.get('difference_sec', 0))
        
        if not items:
            logger.warning("≈Ω√°dn√° platn√° data pro vizualizaci")
            return False
        
        try:
            # Vytvo≈ôen√≠ grafu
            fig, ax = plt.subplots(figsize=(12, 6), dpi=100)
            
            x = np.arange(len(items))
            width = 0.35
            
            # Sloupce pro PDF a WAV
            rects1 = ax.bar(x - width/2, pdf_durations, width, label='PDF D√©lka', color='#3498db')
            rects2 = ax.bar(x + width/2, wav_durations, width, label='WAV D√©lka', color='#2ecc71')
            
            # P≈ôid√°n√≠ rozd√≠l≈Ø jako textu
            for i, (rect1, rect2, diff) in enumerate(zip(rects1, rects2, differences)):
                height = max(rect1.get_height(), rect2.get_height())
                ax.annotate(f'{diff:.1f}s', 
                            xy=(rect2.get_x() + rect2.get_width() / 2, height),
                            xytext=(0, 3),  # 3 points vertical offset
                            textcoords="offset points",
                            ha='center', va='bottom',
                            color='red' if abs(diff) > 10 else 'green',
                            fontsize=8)
            
            # Nastaven√≠ grafu
            ax.set_ylabel('D√©lka (sekundy)')
            ax.set_title('Porovn√°n√≠ d√©lek PDF vs WAV')
            ax.set_xticks(x)
            ax.set_xticklabels(items, rotation=45, ha='right')
            ax.legend()
            
            fig.tight_layout()
            plt.savefig(output_path, dpi=100, bbox_inches='tight')
            plt.close(fig)
            
            logger.info(f"Vizualizace ulo≈æena do: {output_path}")
            return True
        except Exception as e:
            logger.error(f"Chyba p≈ôi vytv√°≈ôen√≠ vizualizace: {e}")
            return False

# ------------------------------------------------------------
# ≈Ωivotn√≠ cyklus serveru
# ------------------------------------------------------------
@asynccontextmanager
async def preflight_lifespan(server: FastMCP):
    logger.info("‚ö° Vinyl Preflight Processor MCP Server starting...")

    # Vytvo≈ô√≠me jednoduch√Ω objekt pro statistiky
    class Stats:
        def __init__(self):
            self.analysis_count = 0
            self.total_projects_processed = 0
            self.total_processing_time = 0.0
            self.last_report_path = None

    stats = Stats()

    try:
        yield stats
    finally:
        logger.info(f"üìä Celkov√© statistiky: {stats.analysis_count} anal√Ωz, {stats.total_projects_processed} projekt≈Ø zpracov√°no")

# ------------------------------------------------------------
# Hlavn√≠ MCP n√°stroj
# ------------------------------------------------------------
@mcp.tool()
async def run_full_preflight_check(
    source_directory: str,
    ctx: Context
) -> Dict[str, Any]:
    """
    Spust√≠ kompletn√≠ preflight validaci pro projekt v dan√©m adres√°≈ôi.
    Proskenuje PDF a WAV soubory, extrahuje data pomoc√≠ AI, porovn√° d√©lky
    a vygeneruje fin√°ln√≠ CSV report.

    Args:
        source_directory: Absolutn√≠ cesta k adres√°≈ôi obsahuj√≠c√≠mu projekt (nebo archivy).

    Returns:
        Slovn√≠k s v√Ωsledky validace vƒçetnƒõ cesty k reportu a vizualizac√≠m.
    """

    start_time = time.time()

    # P≈ô√≠stup ke statistik√°m
    stats = global_stats

    result = {
        "status": "success",
        "source_directory": source_directory,
        "report_path": "",
        "visualization_path": "",
        "project_count": 0,
        "validation_results": [],
        "processing_time": 0.0,
        "message": ""
    }

    try:
        # Validace vstupu
        if not os.path.exists(source_directory):
            raise FileNotFoundError(f"Adres√°≈ô nebyl nalezen: {source_directory}")

        if not os.path.isdir(source_directory):
            raise ValueError(f"Zadan√° cesta nen√≠ adres√°≈ô: {source_directory}")

        await ctx.info(f"üîç Zahajuji preflight anal√Ωzu adres√°≈ôe: {source_directory}")

        # Vytvo≈ôen√≠ instance procesoru s optimalizovan√Ωmi callbacky
        progress_updates = []
        status_messages = []

        # Z√≠sk√°me referenci na event loop pro pou≈æit√≠ v callbackech
        loop = asyncio.get_event_loop()

        def progress_callback(value: int, maximum: int):
            progress_updates.append((value, maximum))
            # Pouze logujeme do konzole pro rychlost - MCP zpr√°vy jsou pomal√©
            progress_pct = (value / maximum) * 100 if maximum > 0 else 0
            logger.info(f"üîÑ Pr≈Øbƒõh: {progress_pct:.1f}% ({value}/{maximum})")

        def status_callback(text: str):
            status_messages.append(text)
            # Pouze logujeme do konzole pro rychlost - MCP zpr√°vy jsou pomal√©
            logger.info(f"‚ÑπÔ∏è {text}")

        processor = PreflightProcessor(API_KEY, progress_callback, status_callback)

        # Debug informace
        await ctx.info(f"üîß Pou≈æ√≠v√°m optimalizovanou verzi s ThreadPoolExecutor")
        await ctx.info(f"üìÅ Zpracov√°v√°m adres√°≈ô: {source_directory}")

        # Spust√≠me synchronn√≠ operaci v thread poolu, aby neblokovala event loop
        try:
            report_path = await loop.run_in_executor(None, processor.run, source_directory)
        except Exception as e:
            logger.error(f"Chyba p≈ôi spu≈°tƒõn√≠ procesoru: {e}")
            await ctx.error(f"Chyba p≈ôi zpracov√°n√≠: {str(e)}")
            return {
                "status": "error",
                "message": f"Chyba p≈ôi zpracov√°n√≠: {str(e)}",
                "source_directory": source_directory
            }
        
        if report_path:
            # Naƒçten√≠ v√Ωsledk≈Ø z CSV reportu
            validation_results = []
            try:
                with open(report_path, 'r', newline='', encoding='utf-8') as f:
                    reader = csv.DictReader(f)
                    for row in reader:
                        validation_results.append(row)
            except Exception as e:
                logger.error(f"Chyba p≈ôi ƒçten√≠ CSV souboru: {e}")
                result["status"] = "error"
                result["message"] = f"Chyba p≈ôi ƒçten√≠ reportu: {str(e)}"
                return result
            
            # Vytvo≈ôen√≠ vizualizace (pokud je matplotlib dostupn√Ω)
            visualization_path = ""
            if MATPLOTLIB_AVAILABLE:
                temp_dir = Path(tempfile.gettempdir()) / "vinyl_preflight"
                temp_dir.mkdir(exist_ok=True)
                
                timestamp = time.strftime('%Y-%m-%d_%H-%M-%S')
                viz_path = temp_dir / f"preflight_viz_{timestamp}.png"
                
                if ResultsVisualizer.create_validation_chart(validation_results, viz_path):
                    # Lok√°ln√≠ URL pro vizualizaci
                    visualization_path = f"file:///{viz_path}".replace('\\', '/')
                    await ctx.info(f"üìà Vizualizace dostupn√° na: {visualization_path}")
            
            # Aktualizace statistik
            stats.analysis_count += 1
            stats.total_projects_processed += len(set(r.get('project_title') for r in validation_results))
            stats.last_report_path = report_path
            
            # P≈ô√≠prava v√Ωsledk≈Ø
            project_count = len(set(r.get('project_title') for r in validation_results))
            
            result.update({
                "report_path": report_path,
                "visualization_path": visualization_path,
                "project_count": project_count,
                "validation_results": validation_results,
                "message": f"Anal√Ωza dokonƒçena. Zpracov√°no {project_count} projekt≈Ø. Report ulo≈æen do: {report_path}"
            })
            
            await ctx.info(f"‚úÖ Preflight anal√Ωza dokonƒçena. Zpracov√°no {project_count} projekt≈Ø.")
            await ctx.info(f"üìä Report ulo≈æen do: {report_path}")
            await ctx.info(f"‚ö° Optimalizovan√° verze pro MCP server (ThreadPoolExecutor m√≠sto multiprocessing)")
            
        else:
            result["status"] = "error"
            result["message"] = "Bƒõhem zpracov√°n√≠ nastala chyba a report nebyl vygenerov√°n."
            await ctx.error("‚ùå Bƒõhem zpracov√°n√≠ nastala chyba a report nebyl vygenerov√°n.")
            
    except Exception as e:
        logger.error(f"Kritick√° chyba v n√°stroji run_full_preflight_check: {e}", exc_info=True)
        result["status"] = "error"
        result["message"] = f"Kritick√° chyba: {str(e)}"
        await ctx.error(f"‚ùå Nastala neoƒçek√°van√° chyba: {str(e)}")
    
    finally:
        result["processing_time"] = round(time.time() - start_time, 2)

        # Bezpeƒçn√° aktualizace statistik
        try:
            if hasattr(stats, 'total_processing_time'):
                stats.total_processing_time += result["processing_time"]
            else:
                logger.warning("Atribut total_processing_time neexistuje, vytv√°≈ô√≠m ho")
                stats.total_processing_time = result["processing_time"]
        except Exception as e:
            logger.warning(f"Chyba p≈ôi aktualizaci statistik: {e}")

    return result

@mcp.tool()
async def get_server_stats(ctx: Context) -> Dict[str, Any]:
    """
    Vr√°t√≠ statistiky o vyu≈æit√≠ serveru.

    Returns:
        Slovn√≠k se statistikami serveru.
    """
    try:
        stats = global_stats

        # Bezpeƒçn√© z√≠sk√°n√≠ atribut≈Ø s v√Ωchoz√≠mi hodnotami
        analysis_count = getattr(stats, 'analysis_count', 0)
        total_projects_processed = getattr(stats, 'total_projects_processed', 0)
        total_processing_time = getattr(stats, 'total_processing_time', 0.0)
        last_report_path = getattr(stats, 'last_report_path', None)

        # V√Ωpoƒçet pr≈Ømƒõrn√©ho ƒçasu zpracov√°n√≠
        average_time = round(total_processing_time / max(1, analysis_count), 2) if analysis_count > 0 else 0.0

        return {
            "analysis_count": analysis_count,
            "total_projects_processed": total_projects_processed,
            "total_processing_time": round(total_processing_time, 2),
            "last_report_path": last_report_path,
            "average_processing_time": average_time,
            "matplotlib_available": MATPLOTLIB_AVAILABLE
        }
    except Exception as e:
        logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ statistik: {e}")
        return {
            "status": "error",
            "message": f"Chyba p≈ôi z√≠sk√°v√°n√≠ statistik: {str(e)}",
            "analysis_count": 0,
            "total_projects_processed": 0,
            "total_processing_time": 0.0,
            "average_processing_time": 0.0,
            "matplotlib_available": MATPLOTLIB_AVAILABLE
        }

# ------------------------------------------------------------
# Spu≈°tƒõn√≠ serveru
# ------------------------------------------------------------
mcp.lifespan = preflight_lifespan

# Alternativn√≠ zp≈Øsob spu≈°tƒõn√≠ (pokud v√Ω≈°e uveden√© nefunguje)

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Vinyl Preflight Processor MCP Server v2.5")
    parser.add_argument("--port", type=int, default=8050)
    parser.add_argument("--host", type=str, default="127.0.0.1")
    parser.add_argument("--transport", choices=["stdio", "http"], default="http")
    
    args = parser.parse_args()
    
    if args.transport == "http":
        logger.info(f"üöÄ Spou≈°t√≠m MCP server v HTTP re≈æimu na {args.host}:{args.port}")
        # Pou≈æijeme uvicorn pro spu≈°tƒõn√≠ HTTP serveru s SSE
        import uvicorn
        app = mcp.sse_app()
        uvicorn.run(app, host=args.host, port=args.port)
    else:
        logger.info("üöÄ Spou≈°t√≠m MCP server v STDIO re≈æimu")
        mcp.run(transport="stdio")